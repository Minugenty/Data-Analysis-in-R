k5 <- kmeans(student, centers = 5, nstart = 25)
k6 <- kmeans(student, centers = 6, nstart = 25)
k7 <- kmeans(student, centers = 7, nstart = 25)
k8 <- kmeans(student, centers = 8, nstart = 25)
# plots to compare
p1 <- fviz_cluster(k2, geom = "point", data = student) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point",  data = student) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point",  data = student) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point",  data = student) + ggtitle("k = 5")
p5 <- fviz_cluster(k6, geom = "point",  data = student) + ggtitle("k = 6")
p6 <- fviz_cluster(k7, geom = "point",  data = student) + ggtitle("k = 7")
p7 <- fviz_cluster(k8, geom = "point",  data = student) + ggtitle("k = 8")
library(gridExtra)
grid.arrange(p1, p2, p3, p4,p5,p6,p7, nrow = 2)
# Solution of task 1...
student <- read_csv("clustering-student-mat.csv")
str(student)
k2 <- kmeans(student, centers = 2, nstart = 25)
str(k2)
k3 <- kmeans(student, centers = 3, nstart = 25)
k4 <- kmeans(student, centers = 4, nstart = 25)
k5 <- kmeans(student, centers = 5, nstart = 25)
k6 <- kmeans(student, centers = 6, nstart = 25)
k7 <- kmeans(student, centers = 7, nstart = 25)
k8 <- kmeans(student, centers = 8, nstart = 25)
# plots to compare
p1 <- fviz_cluster(k2, geom = "point", data = student) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point",  data = student) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point",  data = student) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point",  data = student) + ggtitle("k = 5")
p5 <- fviz_cluster(k6, geom = "point",  data = student) + ggtitle("k = 6")
p6 <- fviz_cluster(k7, geom = "point",  data = student) + ggtitle("k = 7")
p7 <- fviz_cluster(k8, geom = "point",  data = student) + ggtitle("k = 8")
library(gridExtra)
grid.arrange(p1, p2, p3, p4,p5,p6,p7, nrow = 4)
d1 <- dbscan(student, eps = 1)
d5 <- dbscan(student, eps = 5)
d10 <- dbscan(student, eps = 10)
p1 <- fviz_cluster(d1, geom = "point", data = student) + ggtitle("eps = 1")
p2 <- fviz_cluster(d5, geom = "point",  data = student) + ggtitle("eps = 5")
p3 <- fviz_cluster(d10, geom = "point",  data = student) + ggtitle("eps = 10")
d1 <- dbscan(student, eps = 1)
d5 <- dbscan(student, eps = 5)
d10 <- dbscan(student, eps = 10)
p1 <- fviz_cluster(d1, geom = "point", data = student) + ggtitle("eps = 1")
p2 <- fviz_cluster(d5, geom = "point",  data = student) + ggtitle("eps = 5")
p3 <- fviz_cluster(d10, geom = "point",  data = student) + ggtitle("eps = 10")
grid.arrange(p1, p2, p3, nrow = 3)
d1 <- dbscan(student, eps = 1)
d5 <- dbscan(student, eps = 5)
d10 <- dbscan(student, eps = 10)
p1 <- fviz_cluster(d1, geom = "point", data = student) + ggtitle("eps = 1")
p2 <- fviz_cluster(d5, geom = "point",  data = student) + ggtitle("eps = 5")
p3 <- fviz_cluster(d10, geom = "point",  data = student) + ggtitle("eps = 10")
grid.arrange(p1, p2, p3, nrow = 1)
k3 <- kmeans(student, centers = 3, nstart = 25)
k4 <- kmeans(student, centers = 4, nstart = 25)
k5 <- kmeans(student, centers = 5, nstart = 25)
k6 <- kmeans(student, centers = 6, nstart = 25)
k7 <- kmeans(student, centers = 7, nstart = 25)
k8 <- kmeans(student, centers = 8, nstart = 25)
# plots to compare
p1 <- fviz_cluster(k2, geom = "point", data = student) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point",  data = student) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point",  data = student) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point",  data = student) + ggtitle("k = 5")
p5 <- fviz_cluster(k6, geom = "point",  data = student) + ggtitle("k = 6")
p6 <- fviz_cluster(k7, geom = "point",  data = student) + ggtitle("k = 7")
p7 <- fviz_cluster(k8, geom = "point",  data = student) + ggtitle("k = 8")
library(gridExtra)
grid.arrange(p1, p2, p3, p4,p5,p6,p7, nrow = 3)
dm <- tribble(~p1,~p2,~p3,~p4,~p5,
0.00, 0.02, 0.90, 0.36, 0.53,
0.02, 0.00, 0.65, 0.15, 0.24,
0.90, 0.65, 0.00, 0.59, 0.45,
0.36, 0.15, 0.59, 0.00, 0.56,
0.53, 0.24, 0.45, 0.56, 0.00) %>% as.matrix()
rownames(dm) <- letters[1:5]
colnames(dm) <- letters[1:5]
knitr::kable(dm)
# Solution of task 4...
distance = dist(dm, method = "euclidean")
# Hierarchical clustering
clust1 = hclust(distance, method="single")
clust2 = hclust(distance, method="complete")
# Solution of task 4...
distance = dist(dm, method = "euclidean")
# Hierarchical clustering
clust1 = hclust(distance, method="single")
clust2 = hclust(distance, method="complete")
plot(clust1, cex = 0.6, hang = -1)
plot(clust2, cex = 0.6, hang = -1)
# Solution of task 4...
distance = dist(dm, method = "euclidean")
# Hierarchical clustering
clust1 = hclust(as.dist(dm), method="single")
clust2 = hclust(distance, method="complete")
plot(clust1, cex = 0.6, hang = -1)
plot(clust2, cex = 0.6, hang = -1)
# Solution of task 4...
clust1 = hclust(as.dist(dm), method="single")
clust2 = hclust(as.dist(dm), method="complete")
plot(clust1, cex = 0.6, hang = -1)
plot(clust2, cex = 0.6, hang = -1)
library(knitr)
rmd_path <- file.path("C:/Users/dell/Downloads/VA/ExerciseSheet_02.Rmd")
knitr::knit(rmd_path)
knitr::knit2html(file.path("C:/Users/dell/Documents/ExerciseSheet_03.Rmd"))
knitr::opts_chunk$set(echo = TRUE, # -> Sollen Code Chunks im gerenderten Dokument angezeigt werden?
eval = TRUE, # -> Sollen R Code Chunks ausgefÃ¼hrt werden?
warning = FALSE, # -> Warnungen sollten nur am Ende zum Rendern auf FALSE gesetzt werden
message = FALSE) # -> Hinweise sollten nur am Ende zum Rendern auf FALSE gesetzt werden
# Solution of task 1...
student <- read_csv("clustering-student-mat.csv")
# Solution of task 1...
student <- read_csv("clustering-student-mat.csv")
# Set up libraries (make sure they are installed, first)
library(tidyverse)
library(stringr)
library(magrittr)
library(cluster)
library(dbscan)
library(factoextra)
library(ggplot2)
# Solution of task 1...
student <- read_csv("clustering-student-mat.csv")
str(student)
k2 <- kmeans(student, centers = 2, nstart = 25)
str(k2)
k3 <- kmeans(student, centers = 3, nstart = 25)
k4 <- kmeans(student, centers = 4, nstart = 25)
k5 <- kmeans(student, centers = 5, nstart = 25)
k6 <- kmeans(student, centers = 6, nstart = 25)
k7 <- kmeans(student, centers = 7, nstart = 25)
k8 <- kmeans(student, centers = 8, nstart = 25)
# plots to compare
p1 <- fviz_cluster(k2, geom = "point", data = student) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point",  data = student) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point",  data = student) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point",  data = student) + ggtitle("k = 5")
p5 <- fviz_cluster(k6, geom = "point",  data = student) + ggtitle("k = 6")
p6 <- fviz_cluster(k7, geom = "point",  data = student) + ggtitle("k = 7")
p7 <- fviz_cluster(k8, geom = "point",  data = student) + ggtitle("k = 8")
library(gridExtra)
grid.arrange(p1, p2, p3, p4,p5,p6,p7, nrow = 3)
d1 <- dbscan(student, eps = 1)
d5 <- dbscan(student, eps = 5)
d10 <- dbscan(student, eps = 10)
p1 <- fviz_cluster(d1, geom = "point", data = student) + ggtitle("eps = 1")
p2 <- fviz_cluster(d5, geom = "point",  data = student) + ggtitle("eps = 5")
p3 <- fviz_cluster(d10, geom = "point",  data = student) + ggtitle("eps = 10")
grid.arrange(p1, p2, p3, nrow = 1)
# Solution of task 3...
silhouette_score <- function(k){
km <- c(k2, k3, k4, k5, k6, k7, k8)
ss <- silhouette(km$cluster, dist(df))
mean(ss[, 3])
}
k <- 2:8
avg_sil <- sapply(k, silhouette_score)
# Solution of task 3...
silhouette_score <- function(k){
km <- kmeans(student, centers = k, nstart=25)
ss <- silhouette(km$cluster, dist(df))
mean(ss[, 3])
}
k <- 2:8
avg_sil <- sapply(k, silhouette_score)
# Solution of task 3...
avg_sil <- function(k) {
km.res <- c(k2, k3, k3, k4, k5, k6, k7, k8)
ss <- silhouette(km.res$cluster, dist(df))
mean(ss[, 3])
}
k.values <- 2:8
avg_sil_values <- map_dbl(k.values, avg_sil)
# Solution of task 3...
km.res <- c(k2, k3, k3, k4, k5, k6, k7, k8)
k.values <- 2:8
avg_sil_values <- map_dbl(k.values, silhouette(km.res$cluster, dist(df)))
# Solution of task 3...
km.res <- c(k2, k3, k3, k4, k5, k6, k7, k8)
k.values <- 2:8
avg_sil_values <- map_dbl(k.values, silhouette(.$cluster, dist(df)))
# Solution of task 3...
km.res <- c(k2, k3, k3, k4, k5, k6, k7, k8)
k.values <- 2:8
avg_sil_values <- map_dbl(k.values, silhouette(k2, dist(df)))
# Solution of task 3...
km.res <- c(k2, k3, k3, k4, k5, k6, k7, k8)
k.values <- 2:8
avg_sil_values <- map_dbl(k.values, silhouette(k2$cluster, dist(df)))
# Solution of task 3...
km.res <- c(k2, k3, k3, k4, k5, k6, k7, k8)
k.values <- 2:8
avg_sil_values <- sapply(k.values, silhouette(k2$cluster, dist(df)))
# Solution of task 3...
km.res <- c(k2, k3, k3, k4, k5, k6, k7, k8)
k <- 2:8
avg_sil_values <- sapply(k, silhouette(k2$cluster, dist(df)))
# Solution of task 3...
km.res <- list(k2, k3, k3, k4, k5, k6, k7, k8)
k <- 2:8
avg_sil_values <- sapply(k, silhouette(k2$cluster, dist(df)))
# Solution of task 3...
km.res <- list(k2, k3, k3, k4, k5, k6, k7, k8)
k <- 2:8
avg_sil_values <- sapply(k, silhouette(km.res$cluster, dist(df)))
# Solution of task 3...
km.res <- c(k2, k3, k3, k4, k5, k6, k7, k8)
k <- 2:8
avg_sil_values <- sapply(k, silhouette(km.res$cluster, dist(df)))
# Solution of task 3...
km.res <- list(k2, k3, k3, k4, k5, k6, k7, k8)
k <- 2:8
avg_sil_values <- map_dbl(k, silhouette(km.res$cluster, dist(df)))
# Solution of task 3...
km.res <- list(k2, k3, k3, k4, k5, k6, k7, k8)
k <- 2:8
avg_sil_values <- sapply(k, ~mean(silhouette(km.res$cluster, dist(df))))
# Solution of task 3...
km.res <- list(k2, k3, k3, k4, k5, k6, k7, k8)
k <- 2:8
avg_sil_values <- sapply(k, mean(silhouette(km.res$cluster, dist(df))))
silhouette_score <- function(k){
km <- kmeans(student, centers = k, nstart=25)
ss <- silhouette(km$cluster, dist(df))
mean(ss[, 3])
}
k <- 2:10
avg_sil <- sapply(k, silhouette_score)
install.packages('factoextra')
install.packages("factoextra")
install.packages("factoextra")
install.packages("factoextra")
knitr::opts_chunk$set(echo = TRUE, # -> Sollen Code Chunks im gerenderten Dokument angezeigt werden?
eval = TRUE, # -> Sollen R Code Chunks ausgefÃ¼hrt werden?
warning = FALSE, # -> Warnungen sollten nur am Ende zum Rendern auf FALSE gesetzt werden
message = FALSE) # -> Hinweise sollten nur am Ende zum Rendern auf FALSE gesetzt werden
library(factoextra)
fviz_nbclust(df, kmeans, method='silhouette')
# Solution of task 3...
km.res <- list(k2, k3, k3, k4, k5, k6, k7, k8)
k <- 2:8
avg_sil_values <- sapply(k, mean(silhouette(km.res$cluster, dist(student))))
# Set up libraries (make sure they are installed, first)
library(tidyverse)
library(stringr)
library(magrittr)
library(cluster)
library(dbscan)
library(factoextra)
library(ggplot2)
# Solution of task 1...
student <- read_csv("clustering-student-mat.csv")
str(student)
k2 <- kmeans(student, centers = 2, nstart = 25)
str(k2)
k3 <- kmeans(student, centers = 3, nstart = 25)
k4 <- kmeans(student, centers = 4, nstart = 25)
k5 <- kmeans(student, centers = 5, nstart = 25)
k6 <- kmeans(student, centers = 6, nstart = 25)
k7 <- kmeans(student, centers = 7, nstart = 25)
k8 <- kmeans(student, centers = 8, nstart = 25)
# plots to compare
p1 <- fviz_cluster(k2, geom = "point", data = student) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point",  data = student) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point",  data = student) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point",  data = student) + ggtitle("k = 5")
p5 <- fviz_cluster(k6, geom = "point",  data = student) + ggtitle("k = 6")
p6 <- fviz_cluster(k7, geom = "point",  data = student) + ggtitle("k = 7")
p7 <- fviz_cluster(k8, geom = "point",  data = student) + ggtitle("k = 8")
library(gridExtra)
grid.arrange(p1, p2, p3, p4,p5,p6,p7, nrow = 3)
d1 <- dbscan(student, eps = 1)
d5 <- dbscan(student, eps = 5)
d10 <- dbscan(student, eps = 10)
p1 <- fviz_cluster(d1, geom = "point", data = student) + ggtitle("eps = 1")
p2 <- fviz_cluster(d5, geom = "point",  data = student) + ggtitle("eps = 5")
p3 <- fviz_cluster(d10, geom = "point",  data = student) + ggtitle("eps = 10")
grid.arrange(p1, p2, p3, nrow = 1)
# Solution of task 3...
km.res <- list(k2, k3, k3, k4, k5, k6, k7, k8)
k <- 2:8
avg_sil_values <- sapply(k, mean(silhouette(km.res$cluster, dist(student))))
library(factoextra)
fviz_nbclust(df, kmeans, method='silhouette')
fviz_nbclust(student, kmeans, method='silhouette')
fviz_nbclust(student, dbscan, method='silhouette')
library(knitr)
knitr::knit2html(file.path("C:/Users/dell/Documents/ExerciseSheet_03.Rmd"))
knitr::opts_chunk$set(echo = TRUE, # -> Sollen Code Chunks im gerenderten Dokument angezeigt werden?
eval = TRUE, # -> Sollen R Code Chunks ausgefÃ¼hrt werden?
warning = FALSE,message = FALSE) # -> Hinweise sollten nur am Ende zum Rendern auf FALSE gesetzt werden
# Set up libraries (make sure they are installed, first)
library(tidyverse)
library(biclust)
library(reshape)
library(ggplot2)
# Define data
# Set seed
set.seed(48)
get_rand <- function(d) {
return(rnorm(1, mean = d, sd = 1))
}
m <- round(runif(50000, 0, 1)) * 2 + 1
point_data = tibble(x = sapply(m, get_rand), y = sapply(m, get_rand))
install.packages('hexbin')
# Solution of task 3...
library(hexbin)
ggplot(dataset, aes(x=Xvalues,y=Yvalues)) + stat_binhex(bins=15, color=c("#D7DADB")) + theme_classic(base_size=18) + labs(x = "Dimension 1", y = "Dimension 2") + scale_fill_gradient(low = "grey", high = "red")
# Solution of task 3...
library(hexbin)
ggplot(point_data, aes(x= x,y=y)) + stat_binhex(bins=15, color=c("#D7DADB")) + theme_classic(base_size=18) + labs(x = "Dimension 1", y = "Dimension 2") + scale_fill_gradient(low = "grey", high = "red")
# Solution of task 3...
library(hexbin)
ggplot(point_data, aes(x= x,y=y)) + stat_binhex(bins=15, color=c("#D7DADB")) + theme_classic(base_size=18) + labs(x = "Dimension 1", y = "Dimension 2") + scale_fill_gradient(low = "grey", high = "red")
# Solution of task 3...
library(hexbin)
ggplot(point_data, aes(x= x,y=y)) + theme_classic(base_size=18) + labs(x = "Dimension 1", y = "Dimension 2") + scale_fill_gradient(low = "grey", high = "red")
ggplot(point_data, aes(x= x,y=y)) + stat_binhex(bins=15, color=c("#D7DADB")) + theme_classic(base_size=18) + labs(x = "Dimension 1", y = "Dimension 2") + scale_fill_gradient(low = "grey", high = "red")
# Solution of task 3...
library(hexbin)
ggplot(point_data, aes(x= x,y=y)) + labs(x = "Dimension 1", y = "Dimension 2"))
# Solution of task 3...
library(hexbin)
ggplot(point_data, aes(x= x,y=y)) + labs(x = "Dimension 1", y = "Dimension 2")
ggplot(point_data, aes(x= x,y=y)) + stat_binhex(bins=15, color=c("#D7DADB")) + theme_classic(base_size=18) + labs(x = "Dimension 1", y = "Dimension 2") + scale_fill_gradient(low = "grey", high = "red")
# Solution of task 3...
library(hexbin)
ggplot(point_data, aes(x= x,y=y)) + geom_point() + labs(x = "Dimension 1", y = "Dimension 2")
ggplot(point_data, aes(x= x,y=y)) + stat_binhex(bins=15, color=c("#D7DADB")) + theme_classic(base_size=18) + labs(x = "Dimension 1", y = "Dimension 2") + scale_fill_gradient(low = "grey", high = "red")
# Solution of task 3...
library(hexbin)
ggplot(point_data, aes(x= x,y=y)) + geom_point() + labs(x = "Dimension 1", y = "Dimension 2")
ggplot(point_data, aes(x= x,y=y)) + stat_binhex(bins=20, color=c("#D7DADB")) + theme_classic(base_size=18) + labs(x = "Dimension 1", y = "Dimension 2") + scale_fill_gradient(low = "grey", high = "red")
# Solution of task 3...
library(hexbin)
ggplot(point_data, aes(x= x,y=y)) + geom_point() + labs(x = "Dimension 1", y = "Dimension 2")
ggplot(point_data, aes(x= x,y=y)) + stat_binhex(bins=10, color=c("#D7DADB")) + theme_classic(base_size=18) + labs(x = "Dimension 1", y = "Dimension 2") + scale_fill_gradient(low = "grey", high = "red")
# Solution of task 3...
library(hexbin)
ggplot(point_data, aes(x= x,y=y)) + geom_point() + labs(x = "Dimension 1", y = "Dimension 2")
ggplot(point_data, aes(x= x,y=y)) + stat_binhex(bins=15, color=c("#D7DADB")) + theme_classic(base_size=18) + labs(x = "Dimension 1", y = "Dimension 2") + scale_fill_gradient(low = "grey", high = "red")
# Solution of task 3...
library(hexbin)
ggplot(point_data, aes(x= x,y=y)) + geom_point() + labs(x = "Dimension 1", y = "Dimension 2")
ggplot(point_data, aes(x= x,y=y)) + stat_binhex(bins=25, color=c("#D7DADB")) + theme_classic(base_size=18) + labs(x = "Dimension 1", y = "Dimension 2") + scale_fill_gradient(low = "grey", high = "red")
# Solution of task 3...
library(hexbin)
ggplot(point_data, aes(x= x,y=y)) + geom_point(color=c("#D7DADB")) + labs(x = "Dimension 1", y = "Dimension 2")
ggplot(point_data, aes(x= x,y=y)) + stat_binhex(bins=25, color=c("#D7DADB")) + theme_classic(base_size=18) + labs(x = "Dimension 1", y = "Dimension 2") + scale_fill_gradient(low = "grey", high = "red")
# Solution of task 3...
library(hexbin)
ggplot(point_data, aes(x= x,y=y)) + geom_point() + labs(x = "Dimension 1", y = "Dimension 2") + scale_fill_gradient(low = "grey", high = "red")
ggplot(point_data, aes(x= x,y=y)) + stat_binhex(bins=25, color=c("#D7DADB")) + theme_classic(base_size=18) + labs(x = "Dimension 1", y = "Dimension 2") + scale_fill_gradient(low = "grey", high = "red")
# Solution of task 3...
library(hexbin)
ggplot(point_data, aes(x= x,y=y)) + geom_point(color=c("#D7DADB")) + labs(x = "Dimension 1", y = "Dimension 2") + scale_fill_gradient(low = "grey", high = "red")
ggplot(point_data, aes(x= x,y=y)) + stat_binhex(bins=25, color=c("#D7DADB")) + theme_classic(base_size=18) + labs(x = "Dimension 1", y = "Dimension 2") + scale_fill_gradient(low = "grey", high = "red")
# Solution of task 3...
library(hexbin)
ggplot(point_data, aes(x= x,y=y)) + geom_point() + labs(x = "Dimension 1", y = "Dimension 2")
ggplot(point_data, aes(x= x,y=y)) + stat_binhex(bins=25, color=c("#D7DADB")) + theme_classic(base_size=18) + labs(x = "Dimension 1", y = "Dimension 2") + scale_fill_gradient(low = "grey", high = "red")
knitr::opts_chunk$set(echo = TRUE, # -> Sollen Code Chunks im gerenderten Dokument angezeigt werden?
eval = TRUE, # -> Sollen R Code Chunks ausgefÃ¼hrt werden?
warning = FALSE,message = FALSE) # -> Hinweise sollten nur am Ende zum Rendern auf FALSE gesetzt werden
# Set up libraries (make sure they are installed, first)
library(tidyverse)
library(biclust)
library(reshape)
library(ggplot2)
# Create bipartite graph data
game_matrix <- matrix(c(1, 0, 0, 1, 1, 1, 0,
0, 1, 1, 0, 1, 0, 0,
0, 0, 0, 0, 1, 0, 1,
1, 1, 0, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0, 1,
0, 1, 0, 1, 1, 0, 0,
0, 0, 0, 0, 0, 1, 0),
nrow = 7,
ncol = 7,
byrow = TRUE)
colnames(game_matrix) <- c("The Witcher 3","Terraria","Hollow Knight","Cities: Skylines","GTA V","Divinity","XCOM 2")
rownames(game_matrix) <- c("Tarek", "Sam", "Ebele", "Kim", "Ali", "Aiko", "Parvati")
# Solution of task 2...
cls <- biclust(game_matrix, method=BCPlaid(), verbose=FALSE)
drawHeatmap(x,bicResult=NULL,number=NA,local=TRUE, beamercolor=FALSE)
# Solution of task 2...
cls <- biclust(game_matrix, method=BCPlaid(), verbose=FALSE)
drawHeatmap(game_matrix,bicResult=NULL,number=NA,local=TRUE, beamercolor=FALSE)
drawHeatmap2(game_matrix,bicResult=NULL,number=NA,plotAll=FALSE)
# Solution of task 2...
cls <- biclust(game_matrix, method=BCPlaid(), verbose=FALSE)
drawHeatmap(game_matrix,bicResult=NULL,number=NA,local=TRUE, beamercolor=FALSE)
drawHeatmap2(game_matrix,bicResult=cls,number=NA,plotAll=FALSE)
# Solution of task 2...
cls <- biclust(game_matrix, method=BCPlaid(), verbose=FALSE)
drawHeatmap(game_matrix,bicResult=NULL,number=NA,local=TRUE, beamercolor=FALSE)
drawHeatmap(game_matrix,bicResult=cls,number=NA,local=TRUE, beamercolor=FALSE)
# Solution of task 2...
cls <- biclust(game_matrix, method=BCCC(), verbose=FALSE)
# Solution of task 2...
cls <- biclust(game_matrix, method=BCCC())
drawHeatmap(game_matrix,bicResult=NULL,number=NA,local=TRUE, beamercolor=FALSE)
drawHeatmap(game_matrix,bicResult=cls,number=NA,local=TRUE, beamercolor=FALSE)
# Solution of task 2...
cls <- biclust(game_matrix, method=BCSpectral())
drawHeatmap(game_matrix,bicResult=NULL,number=NA,local=TRUE, beamercolor=FALSE)
drawHeatmap(game_matrix,bicResult=cls,number=NA,local=TRUE, beamercolor=FALSE)
# Solution of task 2...
cls <- biclust(game_matrix, method=BCSpectral())
drawHeatmap(game_matrix,bicResult=NULL,number=NA,local=TRUE, beamercolor=FALSE)
drawHeatmap(game_matrix,bicResult=cls,number=NA, beamercolor=FALSE)
# Solution of task 2...
cls <- biclust(game_matrix, method=BCSpectral())
drawHeatmap(game_matrix,bicResult=NULL,number=NA,local=TRUE, beamercolor=FALSE)
drawHeatmap(game_matrix,bicResult=cls)
# Solution of task 2...
cls <- biclust(game_matrix, method=BCSpectral())
cls
drawHeatmap(game_matrix,bicResult=NULL,number=NA,local=TRUE, beamercolor=FALSE)
drawHeatmap(game_matrix,bicResult=cls)
library(knitr)
rmd_path <- file.path("C:/Users/dell/Downloads/VA/ExerciseSheet_02.Rmd")
knitr::knit(rmd_path)
library(knitr)
rmd_path <- file.path("C:/Users/dell/Downloads/VA/ExerciseSheet_08.Rmd")
knitr::knit(rmd_path)
library(knitr)
rmd_path <- file.path("E:/DKE/Sem 1/VA/ExerciseSheet_08.Rmd")
knitr::knit(rmd_path)
library(knitr)
rmd_path <- file.path("E:/DKE/Sem 1/VA/ExerciseSheet_08.Rmd")
knitr::knit(rmd_path)
knitr::knit2html(file.path("E:/DKE/Sem 1/VA/ExerciseSheet_08.Rmd"))
install.packages("FactoMineR")
knitr::opts_chunk$set(echo = TRUE, # -> Sollen Code Chunks im gerenderten Dokument angezeigt werden?
eval = TRUE, # -> Sollen R Code Chunks ausgefÃ¼hrt werden?
warning = FALSE,message = FALSE) # -> Hinweise sollten nur am Ende zum Rendern auf FALSE gesetzt werden
# Define data
# Set seed
set.seed(48)
get_rand <- function(d) {
return(rnorm(1, mean = d, sd = 1))
}
m <- round(runif(50000, 0, 1)) * 2 + 1
point_data = tibble(x = sapply(m, get_rand), y = sapply(m, get_rand))
# Set up libraries (make sure they are installed, first)
library(tidyverse)
library(biclust)
library(reshape)
library(ggplot2)
# Define data
# Set seed
set.seed(48)
get_rand <- function(d) {
return(rnorm(1, mean = d, sd = 1))
}
m <- round(runif(50000, 0, 1)) * 2 + 1
point_data = tibble(x = sapply(m, get_rand), y = sapply(m, get_rand))
# Solution of task 3...
library(hexbin)
ggplot(point_data, aes(x= x,y=y)) + geom_point() + labs(x = "Dimension 1", y = "Dimension 2")
ggplot(point_data, aes(x= x,y=y)) + stat_binhex(bins=25, color=c("#D7DADB")) + theme_classic(base_size=18) + labs(x = "Dimension 1", y = "Dimension 2") + scale_fill_gradient(low = "grey", high = "red")
library("FactoMineR")
library("factoextra")
res.pca <- PCA(point_data, graph = TRUE)
print(res.pca)
library("FactoMineR")
library("factoextra")
res.pca <- PCA(point_data, graph = FALSE)
print(res.pca)
fviz_eig(res.pca, addlabels = TRUE, ylim = c(0, 50))
fviz_eig(res.pca, addlabels = TRUE)
library("FactoMineR")
library("factoextra")
res.pca <- PCA(point_data, graph = FALSE)
summary(res.pca)
fviz_pca_ind(res.pca)
fviz_pca_ind(res.pca, repel = TRUE)
fviz_pca_ind(res.pca, col.ind = "black", repel = TRUE)
#fviz_pca_ind(res.pca, col.ind = "black", repel = TRUE)
plot(density(res.pca))
#fviz_pca_ind(res.pca, col.ind = "black", repel = TRUE)
plot(density(res.pca[,1]))
#fviz_pca_ind(res.pca, col.ind = "black", repel = TRUE)
plot(density(res.pca$x[,1]))
#fviz_pca_ind(res.pca, col.ind = "black", repel = TRUE)
plot(density(res.pca$x[ ,1]))
#fviz_pca_ind(res.pca, col.ind = "black", repel = TRUE)
plot(density(res.pca$x[0,1]))
res.pca$x
res.pca
library("FactoMineR")
library("factoextra")
res.pca <- prcomp(point_data)
summary(res.pca)
fviz_eig(res.pca, addlabels = TRUE)
#fviz_pca_ind(res.pca, col.ind = "black", repel = TRUE)
plot(density(res.pca$x[0,1]))
#fviz_pca_ind(res.pca, col.ind = "black", repel = TRUE)
plot(density(res.pca$x[,1]))
fviz_pca_ind(res.pca, col.ind = "black", repel = TRUE)
#fviz_pca_ind(res.pca, col.ind = "black", repel = TRUE)
plot(density(res.pca$x[,1]))
library(knitr)
knitr::knit(file.path("E:/DKE/Sem 1/VA/ExerciseSheet_08.Rmd"))
knitr::knit(file.path("E:/DKE/Sem 1/VA/ExerciseSheet_08.Rmd"))
knitr::knit(file.path("E:/DKE/Sem 1/VA/ExerciseSheet_09.Rmd"))
knitr::knit(file.path("E:/DKE/Sem 1/VA/ExerciseSheet_09.Rmd"))
knitr::knit2html(file.path("E:/DKE/Sem 1/VA/ExerciseSheet_09.Rmd"))
